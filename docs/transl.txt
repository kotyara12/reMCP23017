#define REG_IODIRA   0x00 // IODIR: РЕГИСТР НАПРАВЛЕНИЯ В/В (АДРЕС 0x00)
#define REG_IODIRB   0x01 // Управляет направлением ввода/вывода данных. 1 = контакт настроен как вход. 0 = контакт настроен как выход.

#define REG_IPOLA    0x02 // IPOL: РЕГИСТР ПОЛЯРНОСТИ ВХОДА (АДРЕС 0x01)
#define REG_IPOLB    0x03 // Если бит установлен, соответствующий бит регистра GPIO будет отражать инвертированное значение на выводе.

#define REG_GPINTENA 0x04 // GPINTEN: ПИН-код ПРЕРЫВАНИЯ ПРИ ИЗМЕНЕНИИ (АДРЕС 0x02)
#define REG_GPINTENB 0x05 // Биты прерывания ввода-вывода общего назначения по изменению. 1 = активирует входной контакт GPIO для события прерывания при изменении

#define REG_DEFVALA  0x06 // DEFVAL: РЕГИСТР ЗНАЧЕНИЙ ПО УМОЛЧАНИЮ (АДРЕС 0x03)
#define REG_DEFVALB  0x07 // Устанавливает значение сравнения для контактов, сконфигурированных для прерывания при изменении, со значениями по умолчанию. Если соответствующий уровень вывода противоположен биту регистра, возникает прерывание.

#define REG_INTCONA  0x08 // INTCON: РЕГИСТР УПРАВЛЕНИЯ ПРЕРЫВАНИЕМ ПРИ ИЗМЕНЕНИИ (АДРЕС 0x04)
#define REG_INTCONB  0x09 // Управляет тем, как сравнивается значение соответствующего вывода для прерывания при изменении. 1 = значение вывода сравнивается с соответствующим битом в регистре DEFVAL. Значение вывода сравнивается с предыдущим значением вывода.

#define REG_IOCON    0x0A // РЕГИСТР КОНФИГУРАЦИИ

#define REG_GPPUA    0x0C // GPPU: РЕГИСТР ПОДТЯГИВАЮЩЕГО РЕЗИСТОРА GPIO (АДРЕС 0x06)
#define REG_GPPUB    0x0D // Управляет слабыми подтягивающими резисторами на каждом выводе (если он сконфигурирован как вход). 1 = Подтягивание разрешено. 0 = Подтягивание отключено

#define REG_INTFA    0x0E // INTF: РЕГИСТР ФЛАГА ПРЕРЫВАНИЯ (АДРЕС 0x07)
#define REG_INTFB    0x0F // Отражает состояние прерывания на порту. Это изменение отражается только в том случае, если прерывания разрешены для GPINTEN. 1 = Пин вызвал прерывание. 0 = прерывание не ожидается

#define REG_INTCAPA  0x10 // INTCAP: ПРЕРЫВАНИЕ СОБРАННОЕ ЗНАЧЕНИЕ ДЛЯ РЕГИСТРА ПОРТА (АДРЕС 0x08)
#define REG_INTCAPB  0x11 // Отражает логический уровень на выводах порта во время прерывания из-за смены вывода. 1 = высокий логический уровень. 0 = низкий логический уровень

#define REG_GPIOA    0x12 // GPIO: РЕГИСТР ПОРТА ВВОДА/ВЫВОДА ОБЩЕГО НАЗНАЧЕНИЯ (АДРЕС 0x09)
#define REG_GPIOB    0x13 // Отражает логический уровень на выводах. 1 = высокий логический уровень. 0 = низкий логический уровень

#define REG_OLATA    0x14 // OLAT: ВЫХОДНОЙ ЗАМОК РЕГИСТР 0 (АДРЕС 0x0A)
#define REG_OLATB    0x15 // Отражает логический уровень на выходной защелке. 1 = высокий логический уровень. 0 = низкий логический уровень

----

#define BIT_IOCON_INTPOL BIT1 // Этот бит устанавливает полярность вывода INT. 1 = активный-высокий. 0 = активный-низкий
#define BIT_IOCON_ODR    BIT2 // Настраивает вывод INT как выход с открытым стоком. 1 = выход с открытым стоком (отменяет бит INTPOL). 0 = активный выход драйвера (бит INTPOL устанавливает полярность).
#define BIT_IOCON_HAEN   BIT3 // Бит разрешения аппаратного адреса (только для MCP23S17)
#define BIT_IOCON_DISSLW BIT4 // Бит управления скоростью нарастания для выхода SDA. 1 = Скорость нарастания отключена. 0 = скорость нарастания включена
#define BIT_IOCON_SEQOP  BIT5 // Бит режима последовательной работы. 1 = Последовательная операция отключена, указатель адреса не увеличивается. 0 = Последовательная работа включена, адресный указатель увеличивается
#define BIT_IOCON_MIRROR BIT6 // Бит зеркального отражения выводов INT. 1 = контакты INT соединены внутри. 0 = контакты INT не подключены. INTA связан с PORTA, а INTB связан с PORTB.
#define BIT_IOCON_BANK   BIT7 // Управляет адресацией регистров. 1 = регистры, связанные с каждым портом, разделены на разные банки. 0 = регистры находятся в одном банке (адреса следуют друг за другом).